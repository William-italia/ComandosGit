|- - - GIT FUNDAMENTAL - - - |

- O que é o GitHub?

* É um serviço para gerenciar repositórios, gratuito e amplamente utilizado;
* Podemos enviar nossos projetos para o GitHub e disponibilizá-lo para outros devs;
* O GitHub é gratuito tanto para projetos públicos como privados;

- O que é um repositório?

* É onde o código será armazenado;
* Na maioria das vezes cada projeto tem um repositório;
* Quando criamos um repositórioestamos iniciando um projeto; 
* O repositorio pode ir para servidores que são especializados em gerenciar repos, como: GitHub e Bitbucket;
* Cada um dos desenvolvedores do time pode baixar o repositório e criar versões diferentes em sua máquina;

- Criando repositório

* Para criar um repositório utilizamos o comando GIT INIT;
* Desta meneira o git vai criar os arquivos necessarios para inicializá-lo;
* Que estão na pasta oculta .git;
* Após este comando o diretório atual será reconhecido pelo git como um projeto e responderá aos seus demais comandos;

COMANDOS: 
> git init

- Enviando repositório para o GitHub

* Podemos facilmente enviar nossos repos para o GitHub;
* Precisamos criar o projeto no nosso GitHub e inicializarmos o mesmo no git em nossa máquina, sincronizar com o github e enviar;
* E esta sequêcia que parece ser complexa é facilmente executada por poucos comandos;
* Vale lembrar que só fazemos UMA VEZ POR PROJETO esse fluxo;
* Porém alguns dos comandos utilizados vão ser úteis ao longo dos seus projetos;

COMANDOS:
> git remote -v (mostra a origem atual do projeto);
> git remote add origin <link ou ssh do repo do projeto> (add uma origem ao projeto);
> git remote rm origin (remove a origem atual do projeto)
> usamos git push -u origin main no primeiro push do projeto (quando fazemos o repo desse modo);

- Verificando mudanças do projeto 

* As mudanças do projeto podem ser verificadas por: GIT STATUS;
* Este comando é utilizado frequentemente durante um projeto
* Aqui serão mapeadas todas as alterações do projeto;
* Podemos também dizer que é a diferença do que já foi enviado para o servidor ou salvo no projeto;

COMANDOS:
> git status

- Adicionando arquivos ao projeto

GIT ADD: Adiciona um arquivo especifico ou mais;

GIT COMMIT: comita um ou mais arquivos para serem enviados ao git;

GIT PUSH: envia os arquivos para o repositorio remoto; 

GIT PULL: sincroniza o projeto local com as mudanças do remoto; 

git branch -M main: serve para criar uma branch mestre no projeto

git remote add origin https://github.com/William-italia/teste01.git : add origin do repositorio
caso não haja permissao:
remote -v: mostra a origem atual;
git remote rm origin > remove a origem atual do projeto
git remote add origin <endereço/chave = link HTTPS/SSH> 

echo "# teste01" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/William-italia/teste01.git
git push -u origin main


GIT RM <nome>: deleta o arquivo tanto do diretorio quanto do repositorio obviamente

GIT MV <nome do arquivo> <destino do arquivo> ex.: git mv rodape.css css/rodape.css
GIT MV <caminho/nome do arquivo> <caminho/novo nome> ex.: git mv css/bannner.css css/banner.css

GIT CHECKOUT: deixa um determinado arquivo original ex.: git checkout css/style.css
GIT RESET: reseta as mudanças feitas, todas as mudanças commitadas e tambem as pendentes serão excluidas, voltara pro estado do ultimo git push feito

.gitignore: serve para esconder arquivos sensiveis, entre outras coisas.

|- - - TRABALHANDO COM BRANCHES - - - |

para vizualizar as branches existentes usa-se o comando: git branch;
para criar uma branch utiliza-se o comando git branch <nome>;

Para deletar um branch é o mesmo comando só que é utilizada a flag --d ou --delete. ex.: git branch -d/--delete <nome da branch>

para mudar de branch utilizamos o comando git checkout <nome da branch> e para mudar e criar um branch ao mesmo tempo utiliza-se a flag -b ex.: git checkout -b <nome da nova branch>

unindo branches: o codigo de dois branches distintos pode ser unido pelo comando git merge <nome>

git stash: podemos salvar as modificações atuais para prossguir com uma outra abordagem de solução e não perder o código, apos o comando o branch será resetado para a sua versão de acordo com o repo

para listar os stashs usa-se o comando git stash list, para recuperarmos uma determinada stash podemos usar o comando git stash aplly <numero> 
comando: git stash show -p <numero>, conseguimos ver o conteudo;

para removermos uma stash usamos o seguinte comando: git stash clear que deleta todas as stash ou git stash drop <numero> que deleta uma stash especifica; 

Utilizando tags:

podemos criar tags nos branches por meio do comando git tag -a <nome> -m "<msg>"
git tag: lista as tags existentes

podemos verificar uma tag com o comando git show <nome>
podemos trocar de tags com o comando git checkout <nome>

As tags podem ser enviadas para o repositótios de código, sendo compartilhada entre os Devs;
O comando para isso é git push origin <nome>
ou para enviar mais de uma tag git push origin --tags

|- - - ENCONTRANDO BRANCHES - - - |

Branches novas são criadas o tempo todo em projetos e seu git pode não estar mapeando eles;
com o comando GIT FETCH -a você é atualizado de todos os branchs e tags que ainda não estão reconhecidos por você;

este conmando é útil para utilizar o branch de algum outro dev do time, por exemplo;

|- - - recebendo alterações - - - |

O comando git pull serve para recebermos atualizações do repositório remoto;
cade branch pode ser atualizado com o git pull;
utilizamos para atualizar a main do repo, e tambem quando trabalhamos em conjunto e queremos as atualizações  de um dev;


|- - - trabalhando com submódulos - - - |

submódulo é a maneira que temos de possuir dois ou mais projeots em um só repositorio;

Podemos adicionar uma dependência ao nosso projeto atual, porém mantendo suas estruturas separadas;
Para add o submódulo utilizamos o comando git submodule add <repo>
Para verificar os submódulos o comando é git submodule  

Atualizando submódulo

Para atualizar um submódulo primeiro devemos commitar as mudanças;
E para enviar para o repo do submódulo utilizamos git push --recurse-submodules=on-demand

Este fluxo fará a atualização apenas do submódulo;


|- - - Análise e inspeção - - - |

- Exibindo informações

O comando git show nos dá diversar informações úteis;
Eles nos dá as informações do branch atual e também seus commits; 
As modificações de arquivos entre cada commit também são exibidas;
Podemos exbir as informações de tags também com: git show <tag>

|- - - Exibindo diferenças - - - |

O comando git diff serve para exibir as diferenças de um branch;
Quando utilizado as diferenças do branch atual com o remoto serão exibidas no terminal;
Podemos também verificar a diferença entre arquivos: git diff HEAD:<arquivo_a> <arquivo_a> ex.: git diff HEAD:git.txt git.txt  

|- - - Log resumido - - - |

O comando GIT SHORTLOG nos dá um log resumido do projeto;
Cada commit será unido por nome do autor;
Podemos então saber quais commits foram enviados ao projeto e por quem;

|- - - Administração de repósitorio - - - |
 
- limpando arquivos untracked
O comando git clean vai verificar e limpar arquivos não estão sendo trackeados;
Ou seja, todos que você não utilizou git add;
utilizado para arquivos que são gerados automaticamente, por exemplo, que atrapalham a visualização do que é realmente importante;

- Otimizando o repositório

O comando git gc é uma abreviação para garbage collector;
Ele identifica arquivos que não são mais necessarios e os exclui;
Isso fará com que o repositório seja otimizado em questões de performace;

 - checando integridade dos arquivos

 O comando git fsck é uma abreviação de File System Check;
 Esta instrução verifica a integridade de arquivos e sua conectividade;
 Verificando assim possíveis corrupções em arquivos;
 Comando de rotina, utilizado para ver se está tudo certo com nossos arquivos;

 - Reflog

 O git reflog vai mapear todos os seus passos no repositórios, até uma mudança de branch é inserida neste log;
 Já o git log, que vimos anteriormente, apenas armazena os commits de um branch;
 Os reflogs ficam salvos até expirar, o tempo de expiração padrão é de 30 dias;

- Transformando o repo para arquivo

Com o comando git archive podemos transformar o repo em um arquivo compacto, por exemplo;
O comando é git archive --format zip --output main_files.zip  main ex.: git archive --format (formato no caso aqui é zip) --output (nome do arquivo no caso arquivos_main.zip) (e a branch no caso main)

|- - - Melhorando os commits do projeto - - - |

- A importância do commit

O problema: commits sem sentido atrapalham o projeto;
precisamos padronizar os commits, para que o projeto cresça de forma saudável também no versionamento, isso ajuda em:

* Review do Pull Request;
* Melhoria dos logs em git log;
* Manutenção do projeto (voltar código, por exemplo) 

- Branches com commits ruins

* Há uma solução chamada private branches;
* Onde criamos branches que não serão compartilhados no repositório, então podemos colocar qualquer commit;
* Ao fim da solução do problema podemos fazer um rebase;
* O comando será: git rebase < branch atual> < branch onde foi feita a funcionalidade> -i ex.: "git rebase func_a private_func_a -i" 
* Escolhemos os branches para excluir (squash) e renomear com (reword);

 - Boas mensagens de commit 

 * Separar assunto do corpo da mensagem;
 * Assunto com no maximo 50 caracteres
 * Assunto com letra inicial maiúscula;
 * Corpo com no máximo 72 caracteres;
 * Explicar o por que e como do commit, e não como o código foi escrito;

